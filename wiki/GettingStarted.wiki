#summary Tutorial to get started with sqlmake
#labels Featured
= Hands on tutorial for sqlmake =

== Is sqlmake for you? == 
Sqlmake is a deployment tool for sql scripts with support for Oracle only databases. It is a windows .NET executable so it requires Windows OS and .NET runtime. Oracle client is also required because sqlmake interacts directly with Oracle database.

Sqlmake was created to support easy configuration management of sql scripts with support of automatic deployment of schema (modifications). With sqlmake it is very easy to deploy database schema in a new environment, keep it up to date with new delta scripts and new versions of pl/sql packages.

Following goals were set during implementation of the tool:
  * Database schema is not only about tables and indexes. PL/SQL is vital part of the database development process and must be equally supported.
  * There must be minimal or no extra work for database developer with preparing sql scripts 
  * Existing database modeling tools, pl/sql development tools and other must coexist with sqlmake 

== How it works?==
Sqlmake requires sql scripts to be divided in the following three groups:
  * Optional data model folder where you keep data model baseline scripts
  * Upgrade folder where you keep sql delta scripts for datamodel upgrade
  * Plsql folder where you keep stored procedures, views, etc
SQL scripts content requires no additional choreography, plain old SQL*Plus script syntax is used. Sqlmake ignores all SQL*Plus commands for now.

How sql scripts are organized inside the three groups is up to the user (except for the upgrade delta scripts which must conform to a naming convention). For example: all SQL commands can be in one big sql scripts, every SQL command can be in its own file, subdirectories can be created and so on. This makes it very flexible to compensate output of different data modeling tools generators. 

Delta upgrade scripts have to be named according to following naming convention: "version_scriptdesc.sql".  For example 121_create_table_employees.sql. Version is an incremental numerical value used to determine correct sequence when applying delta scripts.

Much like to the directory structure when you run sqlmake you have an option to:
  * Install baseline sql scripts
  * Upgrade schema with delta sql scripts or 
  * Deploy plsql code
After invocation sqlmake parses sql scripts and executes SQL commands against an Oracle database. No SQL*Plus or other external tool is required. 
  * When installing data model sqlmake automatically parses all scripts to determine the correct order of sql statements. There is no need to separate SQL commands in tables.sql, indexes.sql, constraints.sql and so on.
  * When upgrading data model sqlmake automatically determines current schema version and applies only necessary delta scripts
  * When deploying plsql code sqlmake applies only new, modified or deleted plsql code. It does this by doing a diff between plsql code on filesystem and plsql code in database. If there is no difference nothing is modified in the database schema. 

At the end sqlmake updates schema metadata with current schema version (kept in table SQLMAKE) and reports status info.
== Try it == 
Sqlmake requires Windows, .NET 2.0 (or higher) runtime and an Oracle Client 10g (or higher). To run these examples you need access to an Oracle database. 

*Download distribution package and prepare a new empty oracle schema*

1. From the downloads page download the distribution zip file. 

2. Unzip this in c:\. 

3. Prepare a new oracle user SMDEMO with password SMDEMO 

4. Open a command prompt cmd.exe in c:\sqlmake-1.0.0.8

5. Grant system privileges to oracle user SMDEMO
{{{
C:\sqlmake-1.0.0.8>sqlplus system/trivial

SQL*Plus: Release 11.1.0.6.0 - Production on Sre Sep 16 21:47:13 2009

Copyright (c) 1982, 2007, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.1.0.6.0 - Production
With the OLAP option

SQL> set verify off
SQL> @examples\example1\dba\create_users_SMDEMO.sql
==============================================================================
Creating user SMDEMO
==============================================================================
If user already exists than this command fails
All other commands should be without errors
Enter value for user_pwd: smdemo

User created.

Setting default and temporary tablespace

User altered.

Setting tablespace quotas

User altered.

Granting system privileeges

Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.


Grant succeeded.

SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.6.0 - Production
With the OLAP option

C:\sqlmake-1.0.0.8>
}}}

*Set path to sqlmake bin folder*
{{{
C:\sqlmake-1.0.0.8>set PATH=c:\sqlmake-1.0.0.8\bin;%PATH%
}}}

=== PART I: Datamodel baseline deployment ===
*Deploy schema to a new clean environment*

6. Deploy datamodel baseline (change directory to examples\example1)
{{{
C:\sqlmake-1.0.0.8\examples\example1>sqlmake -install userid=smdemo/smdemo@localhost:1521/orcl scripts=.
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in scripts folder .\sqlmake.config
Action: Installs schema based on install scripts

Creating sqlmake registry table ...
Searching for sql scripts ...
Loading sql commands from scripts ...
  Target datamodel version in scripts is 1
Executing SQL commands in predefined order...
===========  TABLE ======================================
create table countries...

Version 1 of datamodel installed
Installation successful
Elapsed time 1,984375 sec
}}}

===PART II: Datamodel upgrade===
*Upgrade schema to a new version*

7. Run upgrade (change directory to examples\example2)
{{{
C:\sqlmake-1.0.0.8\examples\example2>sqlmake -upgrade userid=smdemo/smdemo@localhost:1521/orcl scripts=.
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in scripts folder .\sqlmake.config
Action: Upgrades schema based on upgrade scripts

Upgrading data model ...

Execute script .\smdemo\upgrade\2_create_table_towns.sql
  create table towns...
  create primary key towns_pk on towns...
  create foreign key towns_countries_fk on towns...
  create index towns_countries_fk_i on towns...
Setting datamodel version to 2...
Installation of upgrade script 2_create_table_towns.sql successful

All upgrade scripts applied
Elapsed time 1,984375 sec
}}}

*Detecting an error during upgrade to a new version*

8. Run upgrade (change directory to examples\example3)
{{{
C:\sqlmake-1.0.0.8\examples\example3>sqlmake -upgrade userid=smdemo/smdemo@localhost:1521/orcl scripts=.
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in scripts folder .\sqlmake.config
Action: Upgrades schema based on upgrade scripts

Upgrading data model ...

Execute script .\smdemo\upgrade\3_trigger_an_error.sql
  create seuence town_seq...
Error when executing SQL command
ORA-00901: invalid CREATE command
CREATE SEUENCE TOWN_SEQ

Setting datamodel version to 3...
Errors found during upgrade to version 3
Upgrade failed
Elapsed time 1,125 sec
}}}

*Resolve an error during upgrade and clearing sqlmake error status*

9. Check schema version and status 

{{{
C:\sqlmake-1.0.0.8\examples\example3>sqlmake -status userid=smdemo/smdemo@localhost:1521/orcl
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in current folder C:\sqlmake-1.0.0.8\examples\example3\sqlmake.config
Action: Prints target schema status

Current data model version   : 3
Errors during last deployment: 1
Invalid object(s)            : 0
Schema deployment is invalid
Elapsed time 0,84375 sec
}}}

10. List errors 

{{{
C:\sqlmake-1.0.0.8\examples\example3>sqlmake -list_errors userid=smdemo/smdemo@localhost:1521/orcl
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in current folder C:\sqlmake-1.0.0.8\examples\example3\sqlmake.config
Action: Lists all errors from last install


PROMPT   create seuence town_seq...
REM Sequence id: 1
REM .\smdemo\upgrade\3_trigger_an_error.sql, Line no: 1
REM ORA-00901: invalid CREATE command
CREATE SEUENCE TOWN_SEQ
/
Elapsed time 0,890625 sec
}}}

11. Open sql*plus and manually fix the problem

{{{
C:\sqlmake-1.0.0.8\examples\example3>sqlplus smdemo/smdemo

SQL*Plus: Release 11.1.0.6.0 - Production on Sre Sep 16 21:58:24 2009

Copyright (c) 1982, 2007, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.1.0.6.0 - Production
With the OLAP option

SQL> create sequence town_seq;

Sequence created.

SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.6.0 - Production
With the OLAP option
}}}

12. Clear errors from sqlmake metadata repository

{{{
C:\sqlmake-1.0.0.8\examples\example3>sqlmake -clear_errors userid=smdemo/smdemo@localhost:1521/orcl
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in current folder C:\sqlmake-1.0.0.8\examples\example3\sqlmake.config
Action: Clear all errors from last install

1 error(s) cleared
Elapsed time 0,578125 sec
}}}

13. Check schema version and status 

{{{
C:\sqlmake-1.0.0.8\examples\example3>sqlmake -status userid=smdemo/smdemo@localhost:1521/orcl
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in current folder C:\sqlmake-1.0.0.8\examples\example3\sqlmake.config
Action: Prints target schema status

Current data model version   : 3
Errors during last deployment: 0
Errors cleared after install : 1
Invalid object(s)            : 0
Installation successful
Elapsed time 0,796875 sec
}}}

*Create a new upgrade script*

14. Open notepad.exe (in real life you would be using your data modeling tool to create delta script)

_Be careful that notepad will not append default suffix .txt to the filename!_

15. Copy/paste following text

{{{
ALTER TABLE COUNTRIES
 ADD (LNAME VARCHAR2(50) NULL)
/
}}}

16. Save in playground as C:\sqlmake-1.0.0.8\examples\playground\smdemo\upgrade\4_add_column_countries.sql

*Deploy a new upgrade script*

17. Run sqlmake upgrade (change directory to examples\playground)

{{{
C:\sqlmake-1.0.0.8\examples\playground>sqlmake -upgrade userid=smdemo/smdemo@localhost:1521/orcl scripts=.
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in scripts folder .\sqlmake.config
Action: Upgrades schema based on upgrade scripts

Upgrading data model ...

Execute script .\smdemo\upgrade\4_add_column_countries.sql
  alter table countries...
Setting datamodel version to 4...
Installation of upgrade script 4_add_column_countries.sql successful

All upgrade scripts applied
Elapsed time 1,8125 sec
}}}

===PART III: Working with PL/SQL code===

*Deploy PL/SQL code*

18. Run PL/SQL code synchronization (change directory to examples\example3)
{{{
C:\sqlmake-1.0.0.8\examples\example3>sqlmake /db -plsql userid=smdemo/smdemo@localhost:1521/orcl scripts=.
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in scripts folder .\sqlmake.config
Action: Sync PL/SQL differencies to database

Loading plsql command list
  Processing scripts in directory . ...
  Processing database catalog ...

PL/SQL differencies
  Object only on filesystem
    Creating FUNCTION GET_COUNTRY_NAME
  Object only in DB
    None
  Different objects
    None
  Equal objects count:
    0 object(s)
Elapsed time 1,390625 sec
}}}

*Add a new PL/SQL package*

19. Open notepad.exe (in real life you would be using your PL/SQL development tool)

20. Copy/paste following text
{{{
create or replace function get_country_lname(i_id in varchar2) return varchar2
is
begin
  return 'TEST LOWER NAME';
end;
/
}}}

21. Save in playground as C:\sqlmake-1.0.0.8\examples\playground\smdemo\plsql\get_country_lname.fnc

*Deploy a new PL/SQL package*

22. Run sqlmake plsql synchronization
{{{
C:\sqlmake-1.0.0.8\examples\playground>sqlmake /db -plsql userid=smdemo/smdemo@localhost:1521/orcl scripts=.
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in scripts folder .\sqlmake.config
Action: Sync PL/SQL differencies to database

Loading plsql command list
  Processing scripts in directory . ...
  Processing database catalog ...

PL/SQL differencies
  Object only on filesystem
    Creating FUNCTION GET_COUNTRY_LNAME
  Object only in DB
    None
  Different objects
    None
  Equal objects count:
    1 object(s)
Elapsed time 1,859375 sec
}}}

*Modify an existing PL/SQL package*

23. Open get_country_lname.fnc from playground in notepad.exe (in real life you would be using your PL/SQL development tool)

24. Modify pl/sql function to return values from database
{{{
create or replace function get_country_lname(i_id in varchar2) return varchar2
is
  ret_val COUNTRIES.LNAME%TYPE;
begin
  select lname
  into ret_val
  from countries
  where a3 = i_id;

  return ret_Val;
end;
/
}}}

25. Save modified function

*Deploy modified PL/SQL package*

26. Run sqlmake plsql synchronization (playground)
{{{
C:\sqlmake-1.0.0.8\examples\playground>sqlmake /db -plsql userid=smdemo/smdemo@localhost:1521/orcl scripts=.
SQLMake, Copyright Mitja Golouh 2008, mitja.golouh@gmail.com
Revision 8
Loading settings from config in scripts folder .\sqlmake.config
Action: Sync PL/SQL differencies to database

Loading plsql command list
  Processing scripts in directory . ...
  Processing database catalog ...

PL/SQL differencies
  Object only on filesystem
    None
  Object only in DB
    None
  Different objects
    Modified FUNCTION GET_COUNTRY_LNAME
  Equal objects count:
    1 object(s)
Elapsed time 1,9375 sec
}}}

==What next?==

Sqlmake actions are intentionally kept very atomically. Use NANT to combine them in powerful deployment combination suited to your environment.